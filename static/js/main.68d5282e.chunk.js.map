{"version":3,"sources":["components/Header/index.js","components/TableHeader/index.js","utils/API.js","components/TableBody/index.js","components/SearchForm/index.js","components/Search/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","TableHeader","scope","axios","get","TableBody","alt","src","photo","name","email","phone","dateOfBirth","SearchForm","placeholder","onChange","handleInputChange","Search","state","employees","search","filtered","order","loading","sorted","event","searchLC","toLowerCase","searchEmployee","filter","first","includes","last","cell","dob","date","setState","target","value","searchEmployees","map","employee","picture","medium","key","API","then","res","data","results","catch","err","console","log","this","sortBy","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.68d5282e.chunk.js","sourcesContent":["import React from \"react\";\n\n\nfunction Header(props) {\nreturn (\n  <nav className=\"navbar navbar-light bg-light\">\n    <h2>Employee Directory</h2>\n  </nav>\n  )\n}\n\nexport default Header;","import React from \"react\";\n\n\nfunction TableHeader() {\nreturn (\n  <div>\n    <table className=\"table table-dark\">\n      <thead>\n        <tr>\n          <th className=\"text-center\" scope=\"col\">Photo</th>\n          <th className=\"text-center\" scope=\"col\">Name</th>\n          <th className=\"text-center\" scope=\"col\">Email</th>\n          <th className=\"text-center\" scope=\"col\">Phone Number</th>\n          <th className=\"text-center\" scope=\"col\">Date of Birth</th>\n        </tr>\n      </thead>\n    </table>\n  </div>\n  )\n}\n\nexport default TableHeader;","import axios from \"axios\";\nconst BASEURL = \"https://randomuser.me/api/?results=50\";\n\n\nexport default {\n  searchEmployees: function() {\n      return axios.get(BASEURL);\n  }\n};\n","import React from \"react\";\n\n\nfunction TableBody(props) {\nreturn (\n  <div>\n    \n    <table className=\"table table-dark\">\n      <tbody>\n        <tr>\n          <td className=\"text-center\" scope=\"col\"><img alt=\"employee\" src={props.photo}/></td>\n          <td className=\"text-center\" scope=\"col\">{props.name}</td>\n          <td className=\"text-center\" scope=\"col\">{props.email}</td>\n          <td className=\"text-center\" scope=\"col\">{props.phone}</td>\n          <td className=\"text-center\" scope=\"col\">{props.dateOfBirth}</td>\n        </tr>\n      </tbody>\n    </table>\n    \n  </div>\n  )\n}\n\nexport default TableBody;","import React from \"react\";\n\nfunction SearchForm(props) {\n  return (\n    <form className=\"form-inline\">\n      <input className=\"form-control mr-sm-2\" \n        name=\"search\" \n        placeholder=\"Search\"\n        onChange={props.handleInputChange}\n      />\n    </form>\n  );\n}\n\nexport default SearchForm;\n","import React, { Component } from \"react\";\nimport API from \"../../utils/API\";\nimport TableBody from \"../TableBody\";\nimport SearchForm from \"../SearchForm\";\n\nclass Search extends Component {\n  state = {\n      employees: [{}],\n      search: \"\",\n      filtered: [{}],\n      order: \"asc\",\n      loading: true,\n      sorted: false\n  };\n\n  componentDidMount() {\n    API.searchEmployees()\n    .then(res => this.setState({ employees: res.data.results }))\n    .catch(err => console.log(err));\n  }\n\n  handleInputChange = event => {\n    // const name = event.target.name;\n    // const value = event.target.value;\n    // this.setState({\n    //   [name]: value\n    // });\n    let { employees, search } = this.state;\n    const searchLC = search.toLowerCase();\n    let searchEmployee = employees.filter(sorted => {\n        return (\n           sorted.name.first.toLowerCase().includes(searchLC) ||\n           sorted.name.last.toLowerCase().includes(searchLC) ||\n           sorted.email.toLowerCase().includes(searchLC) ||\n           sorted.cell.toLowerCase().includes(searchLC) ||\n           sorted.dob.date.toLowerCase().includes(searchLC) \n\n        )\n    })\n        \n        this.setState({ sorted: true })\n        this.setState({ search: event.target.value });\n        this.setState({ filtered: searchEmployee });\n        \n  };\n\n  searchEmployees = () => {\n    if (this.state.sorted) {\n      return <div>\n        {this.state.filtered.map(employee => (\n            <TableBody \n              photo={employee.picture.medium}\n              name={employee.name.first + \" \" + employee.name.last}\n              email={employee.email}\n              phone={employee.phone}\n              dateOfBirth={employee.dob.date}\n              key={employee.dob.date}\n            />\n            ))}\n      </div>\n    }\n\n    else if (this.state.loading === false) {\n      return <div>\n        {this.state.employees.map(employee => (\n            <TableBody \n              photo={employee.picture.medium}\n              name={employee.name.first + \" \" + employee.name.last}\n              email={employee.email}\n              phone={employee.phone}\n              dateOfBirth={employee.dob.date}\n              key={employee.dob.date}\n            />\n            ))}\n      </div>\n    }\n  }\n\n\n  render() {\n    return (\n          <div>\n            <SearchForm \n            handleInputChange={this.handleInputChange}/>\n            {this.searchEmployees()}\n            {this.sortBy}\n            \n          </div>\n    );\n  }\n}\n\nexport default Search;","import React from 'react';\nimport Header from \"./components/Header\";\nimport TableHeader from \"./components/TableHeader\";\nimport Search from \"./components/Search\";\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <TableHeader /> \n      <Search />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}